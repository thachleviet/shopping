<?php

namespace App\Models\Frontend;

use Illuminate\Notifications\Notifiable;
use Illuminate\Foundation\Auth\User as Authenticatable;

class UserTable extends Authenticatable
{
    use Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected  $table  = 'users' ;
    
    protected $primaryKey = 'id';

    protected $fillable = [
        'id','type', 'birthday', 'name', 'email', 'password', 'phone', 'status', 'gender', 'address', 'avatar', 'facebook_email', 'facebook_id', 'facebook_name', 'remember_token', 'ward_id', 'district_id', 'province_id', 'created_at', 'updated_at', 'confirmed', 'confirmation_code'
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    public function checkInfoUser($params){
       return $this->where(function ($where) use ($params){
            $where->where('phone', $params['phone'])->orWhere('email',$params['email']);
        })->first();
    }
    public function updateProfile($attributes, $id)
    {
        $this->where($this->primaryKey, $id)->update($attributes); // TODO: Change the autogenerated stub
    }


    public function getInfoUser($id){
       return $this->from($this->table.' as user')
           ->leftJoin('province', 'province.province_id', '=', 'user.province_id')
           ->leftJoin('district', 'district.district_id', '=', 'user.district_id')
           ->leftJoin('ward', 'ward.ward_id', '=', 'user.ward_id')
           ->select(
               'province.name as province_name',
               'district.name as district_name',
               'ward.name as ward_name',
               'user.name as user_name',
               'user.birthday as user_birthday',
               'user.gender as user_gender',
               'user.email as user_email',
               'user.avatar as user_avatar',
               'user.phone as user_phone',
               'user.address as user_address',
               'user.facebook_email as facebook_email',
               'user.facebook_name as facebook_name',
               'user.type as user_type'
           )
           ->where('id',$id)->first()->toArray();
    }

    public function getListHistoryOrderOfUser($idUser){

    }
}
